// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "vcf1.h"

/////////////////////////////////////////////////////////////////////////////
// CVCF1

IMPLEMENT_DYNCREATE(CVCF1, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CVCF1 properties

unsigned long CVCF1::GetBackColor()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetBackColor(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CVCF1::GetCol()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetCol(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CVCF1::GetRow()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetRow(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CVCF1::GetShowHScrollBar()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetShowHScrollBar(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

CString CVCF1::GetText()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetText(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

double CVCF1::GetNumber()
{
	double result;
	GetProperty(0x8, VT_R8, (void*)&result);
	return result;
}

void CVCF1::SetNumber(double propVal)
{
	SetProperty(0x8, VT_R8, propVal);
}

CString CVCF1::GetFormula()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetFormula(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

long CVCF1::GetFixedCol()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetFixedCol(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CVCF1::GetFixedCols()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetFixedCols(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CVCF1::GetFixedRow()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetFixedRow(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CVCF1::GetFixedRows()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetFixedRows(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

BOOL CVCF1::GetShowGridLines()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowGridLines(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CVCF1::GetShowRowHeading()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowRowHeading(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

short CVCF1::GetShowSelections()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetShowSelections(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

long CVCF1::GetLeftCol()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetLeftCol(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

long CVCF1::GetMaxCol()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetMaxCol(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CVCF1::GetMaxRow()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetMaxRow(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long CVCF1::GetTopRow()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetTopRow(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

BOOL CVCF1::GetAllowResize()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowResize(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowSelections()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowSelections(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowFormulas()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowFormulas(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowInCellEditing()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowInCellEditing(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

short CVCF1::GetShowVScrollBar()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetShowVScrollBar(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

BOOL CVCF1::GetAllowFillRange()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowFillRange(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowMoveRange()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowMoveRange(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

long CVCF1::GetSelStartCol()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetSelStartCol(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

long CVCF1::GetSelStartRow()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetSelStartRow(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

long CVCF1::GetSelEndCol()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetSelEndCol(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

long CVCF1::GetSelEndRow()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetSelEndRow(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

unsigned long CVCF1::GetExtraColor()
{
	unsigned long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetExtraColor(unsigned long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

CString CVCF1::GetFileName()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetFileName(LPCTSTR propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}

BOOL CVCF1::GetAutoRecalc()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAutoRecalc(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

BOOL CVCF1::GetPrintGridLines()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintGridLines(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

BOOL CVCF1::GetPrintRowHeading()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintRowHeading(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CVCF1::GetPrintHCenter()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintHCenter(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

BOOL CVCF1::GetPrintVCenter()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintVCenter(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

BOOL CVCF1::GetPrintLeftToRight()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintLeftToRight(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

CString CVCF1::GetPrintHeader()
{
	CString result;
	GetProperty(0x28, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetPrintHeader(LPCTSTR propVal)
{
	SetProperty(0x28, VT_BSTR, propVal);
}

CString CVCF1::GetPrintFooter()
{
	CString result;
	GetProperty(0x29, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetPrintFooter(LPCTSTR propVal)
{
	SetProperty(0x29, VT_BSTR, propVal);
}

double CVCF1::GetPrintLeftMargin()
{
	double result;
	GetProperty(0x2a, VT_R8, (void*)&result);
	return result;
}

void CVCF1::SetPrintLeftMargin(double propVal)
{
	SetProperty(0x2a, VT_R8, propVal);
}

double CVCF1::GetPrintTopMargin()
{
	double result;
	GetProperty(0x2b, VT_R8, (void*)&result);
	return result;
}

void CVCF1::SetPrintTopMargin(double propVal)
{
	SetProperty(0x2b, VT_R8, propVal);
}

double CVCF1::GetPrintRightMargin()
{
	double result;
	GetProperty(0x2c, VT_R8, (void*)&result);
	return result;
}

void CVCF1::SetPrintRightMargin(double propVal)
{
	SetProperty(0x2c, VT_R8, propVal);
}

double CVCF1::GetPrintBottomMargin()
{
	double result;
	GetProperty(0x2d, VT_R8, (void*)&result);
	return result;
}

void CVCF1::SetPrintBottomMargin(double propVal)
{
	SetProperty(0x2d, VT_R8, propVal);
}

CString CVCF1::GetPrintArea()
{
	CString result;
	GetProperty(0x2e, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetPrintArea(LPCTSTR propVal)
{
	SetProperty(0x2e, VT_BSTR, propVal);
}

CString CVCF1::GetPrintTitles()
{
	CString result;
	GetProperty(0x2f, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetPrintTitles(LPCTSTR propVal)
{
	SetProperty(0x2f, VT_BSTR, propVal);
}

BOOL CVCF1::GetPrintNoColor()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintNoColor(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}

CString CVCF1::GetSelection()
{
	CString result;
	GetProperty(0x31, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetSelection(LPCTSTR propVal)
{
	SetProperty(0x31, VT_BSTR, propVal);
}

CString CVCF1::GetTableName()
{
	CString result;
	GetProperty(0x32, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetTableName(LPCTSTR propVal)
{
	SetProperty(0x32, VT_BSTR, propVal);
}

BOOL CVCF1::GetDoCancelEdit()
{
	BOOL result;
	GetProperty(0x33, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoCancelEdit(BOOL propVal)
{
	SetProperty(0x33, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoSelChange()
{
	BOOL result;
	GetProperty(0x34, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoSelChange(BOOL propVal)
{
	SetProperty(0x34, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoStartEdit()
{
	BOOL result;
	GetProperty(0x35, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoStartEdit(BOOL propVal)
{
	SetProperty(0x35, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoEndEdit()
{
	BOOL result;
	GetProperty(0x36, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoEndEdit(BOOL propVal)
{
	SetProperty(0x36, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoStartRecalc()
{
	BOOL result;
	GetProperty(0x37, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoStartRecalc(BOOL propVal)
{
	SetProperty(0x37, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoEndRecalc()
{
	BOOL result;
	GetProperty(0x38, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoEndRecalc(BOOL propVal)
{
	SetProperty(0x38, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoClick()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoClick(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoDblClick()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoDblClick(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

BOOL CVCF1::GetShowColHeading()
{
	BOOL result;
	GetProperty(0x3b, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowColHeading(BOOL propVal)
{
	SetProperty(0x3b, VT_BOOL, propVal);
}

BOOL CVCF1::GetPrintColHeading()
{
	BOOL result;
	GetProperty(0x3c, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintColHeading(BOOL propVal)
{
	SetProperty(0x3c, VT_BOOL, propVal);
}

CString CVCF1::GetEntry()
{
	CString result;
	GetProperty(0x3d, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetEntry(LPCTSTR propVal)
{
	SetProperty(0x3d, VT_BSTR, propVal);
}

BOOL CVCF1::GetRepaint()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetRepaint(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowArrows()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowArrows(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowTabs()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowTabs(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

CString CVCF1::GetFormattedText()
{
	CString result;
	GetProperty(0x41, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetFormattedText(LPCTSTR propVal)
{
	SetProperty(0x41, VT_BSTR, propVal);
}

BOOL CVCF1::GetRowMode()
{
	BOOL result;
	GetProperty(0x42, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetRowMode(BOOL propVal)
{
	SetProperty(0x42, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowDelete()
{
	BOOL result;
	GetProperty(0x43, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowDelete(BOOL propVal)
{
	SetProperty(0x43, VT_BOOL, propVal);
}

BOOL CVCF1::GetEnableProtection()
{
	BOOL result;
	GetProperty(0x44, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetEnableProtection(BOOL propVal)
{
	SetProperty(0x44, VT_BOOL, propVal);
}

long CVCF1::GetMinCol()
{
	long result;
	GetProperty(0x45, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetMinCol(long propVal)
{
	SetProperty(0x45, VT_I4, propVal);
}

long CVCF1::GetMinRow()
{
	long result;
	GetProperty(0x46, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetMinRow(long propVal)
{
	SetProperty(0x46, VT_I4, propVal);
}

BOOL CVCF1::GetDoTopLeftChanged()
{
	BOOL result;
	GetProperty(0x47, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoTopLeftChanged(BOOL propVal)
{
	SetProperty(0x47, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowEditHeaders()
{
	BOOL result;
	GetProperty(0x48, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowEditHeaders(BOOL propVal)
{
	SetProperty(0x48, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoObjClick()
{
	BOOL result;
	GetProperty(0x49, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoObjClick(BOOL propVal)
{
	SetProperty(0x49, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoObjDblClick()
{
	BOOL result;
	GetProperty(0x4a, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoObjDblClick(BOOL propVal)
{
	SetProperty(0x4a, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowObjSelections()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowObjSelections(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoRClick()
{
	BOOL result;
	GetProperty(0x4c, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoRClick(BOOL propVal)
{
	SetProperty(0x4c, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoRDblClick()
{
	BOOL result;
	GetProperty(0x4d, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoRDblClick(BOOL propVal)
{
	SetProperty(0x4d, VT_BOOL, propVal);
}

CString CVCF1::GetClip()
{
	CString result;
	GetProperty(0x4e, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetClip(LPCTSTR propVal)
{
	SetProperty(0x4e, VT_BSTR, propVal);
}

CString CVCF1::GetClipValues()
{
	CString result;
	GetProperty(0x4f, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetClipValues(LPCTSTR propVal)
{
	SetProperty(0x4f, VT_BSTR, propVal);
}

BOOL CVCF1::GetPrintLandscape()
{
	BOOL result;
	GetProperty(0x50, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetPrintLandscape(BOOL propVal)
{
	SetProperty(0x50, VT_BOOL, propVal);
}

BOOL CVCF1::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CVCF1::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

CString CVCF1::GetAppName()
{
	CString result;
	GetProperty(0x51, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetAppName(LPCTSTR propVal)
{
	SetProperty(0x51, VT_BSTR, propVal);
}

short CVCF1::GetHdrHeight()
{
	short result;
	GetProperty(0x52, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetHdrHeight(short propVal)
{
	SetProperty(0x52, VT_I2, propVal);
}

short CVCF1::GetHdrWidth()
{
	short result;
	GetProperty(0x53, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetHdrWidth(short propVal)
{
	SetProperty(0x53, VT_I2, propVal);
}

CString CVCF1::GetNumberFormat()
{
	CString result;
	GetProperty(0x54, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetNumberFormat(LPCTSTR propVal)
{
	SetProperty(0x54, VT_BSTR, propVal);
}

CString CVCF1::GetTopLeftText()
{
	CString result;
	GetProperty(0x55, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetTopLeftText(LPCTSTR propVal)
{
	SetProperty(0x55, VT_BSTR, propVal);
}

BOOL CVCF1::GetEnterMovesDown()
{
	BOOL result;
	GetProperty(0x56, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetEnterMovesDown(BOOL propVal)
{
	SetProperty(0x56, VT_BOOL, propVal);
}

long CVCF1::GetLastCol()
{
	long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetLastCol(long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

long CVCF1::GetLastRow()
{
	long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetLastRow(long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

BOOL CVCF1::GetLogical()
{
	BOOL result;
	GetProperty(0x59, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetLogical(BOOL propVal)
{
	SetProperty(0x59, VT_BOOL, propVal);
}

short CVCF1::GetMode()
{
	short result;
	GetProperty(0x5a, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetMode(short propVal)
{
	SetProperty(0x5a, VT_I2, propVal);
}

short CVCF1::GetPolyEditMode()
{
	short result;
	GetProperty(0x5b, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetPolyEditMode(short propVal)
{
	SetProperty(0x5b, VT_I2, propVal);
}

short CVCF1::GetViewScale()
{
	short result;
	GetProperty(0x5c, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetViewScale(short propVal)
{
	SetProperty(0x5c, VT_I2, propVal);
}

short CVCF1::GetSelectionCount()
{
	short result;
	GetProperty(0x5d, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetSelectionCount(short propVal)
{
	SetProperty(0x5d, VT_I2, propVal);
}

CString CVCF1::GetTitle()
{
	CString result;
	GetProperty(0x5e, VT_BSTR, (void*)&result);
	return result;
}

void CVCF1::SetTitle(LPCTSTR propVal)
{
	SetProperty(0x5e, VT_BSTR, propVal);
}

short CVCF1::GetType()
{
	short result;
	GetProperty(0x5f, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetType(short propVal)
{
	SetProperty(0x5f, VT_I2, propVal);
}

BOOL CVCF1::GetShowFormulas()
{
	BOOL result;
	GetProperty(0x60, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowFormulas(BOOL propVal)
{
	SetProperty(0x60, VT_BOOL, propVal);
}

BOOL CVCF1::GetShowZeroValues()
{
	BOOL result;
	GetProperty(0x61, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowZeroValues(BOOL propVal)
{
	SetProperty(0x61, VT_BOOL, propVal);
}

short CVCF1::GetMousePointer()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetMousePointer(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

LPDISPATCH CVCF1::GetMouseIcon()
{
	LPDISPATCH result;
	GetProperty(0x62, VT_DISPATCH, (void*)&result);
	return result;
}

void CVCF1::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x62, VT_DISPATCH, propVal);
}

BOOL CVCF1::GetDoObjValueChanged()
{
	BOOL result;
	GetProperty(0x63, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoObjValueChanged(BOOL propVal)
{
	SetProperty(0x63, VT_BOOL, propVal);
}

BOOL CVCF1::GetScrollToLastRC()
{
	BOOL result;
	GetProperty(0x64, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetScrollToLastRC(BOOL propVal)
{
	SetProperty(0x64, VT_BOOL, propVal);
}

BOOL CVCF1::GetModified()
{
	BOOL result;
	GetProperty(0x65, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetModified(BOOL propVal)
{
	SetProperty(0x65, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoObjGotFocus()
{
	BOOL result;
	GetProperty(0x66, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoObjGotFocus(BOOL propVal)
{
	SetProperty(0x66, VT_BOOL, propVal);
}

BOOL CVCF1::GetDoObjLostFocus()
{
	BOOL result;
	GetProperty(0x67, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetDoObjLostFocus(BOOL propVal)
{
	SetProperty(0x67, VT_BOOL, propVal);
}

long CVCF1::GetPrintDevMode()
{
	long result;
	GetProperty(0x68, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetPrintDevMode(long propVal)
{
	SetProperty(0x68, VT_I4, propVal);
}

long CVCF1::GetNumSheets()
{
	long result;
	GetProperty(0x69, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetNumSheets(long propVal)
{
	SetProperty(0x69, VT_I4, propVal);
}

long CVCF1::GetSheet()
{
	long result;
	GetProperty(0x6a, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetSheet(long propVal)
{
	SetProperty(0x6a, VT_I4, propVal);
}

short CVCF1::GetColWidthUnits()
{
	short result;
	GetProperty(0x6b, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetColWidthUnits(short propVal)
{
	SetProperty(0x6b, VT_I2, propVal);
}

BOOL CVCF1::GetShowTypeMarkers()
{
	BOOL result;
	GetProperty(0x6c, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowTypeMarkers(BOOL propVal)
{
	SetProperty(0x6c, VT_BOOL, propVal);
}

short CVCF1::GetShowTabs()
{
	short result;
	GetProperty(0x6d, VT_I2, (void*)&result);
	return result;
}

void CVCF1::SetShowTabs(short propVal)
{
	SetProperty(0x6d, VT_I2, propVal);
}

BOOL CVCF1::GetShowEditBar()
{
	BOOL result;
	GetProperty(0x6e, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowEditBar(BOOL propVal)
{
	SetProperty(0x6e, VT_BOOL, propVal);
}

BOOL CVCF1::GetShowEditBarCellRef()
{
	BOOL result;
	GetProperty(0x6f, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetShowEditBarCellRef(BOOL propVal)
{
	SetProperty(0x6f, VT_BOOL, propVal);
}

BOOL CVCF1::GetAllowDesigner()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowDesigner(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

OLE_HANDLE CVCF1::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CVCF1::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

BOOL CVCF1::GetAllowAutoFill()
{
	BOOL result;
	GetProperty(0x70, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetAllowAutoFill(BOOL propVal)
{
	SetProperty(0x70, VT_BOOL, propVal);
}

BOOL CVCF1::GetCompressed()
{
	BOOL result;
	GetProperty(0x12b, VT_BOOL, (void*)&result);
	return result;
}

void CVCF1::SetCompressed(BOOL propVal)
{
	SetProperty(0x12b, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CVCF1 operations

CString CVCF1::GetColText(long nCol)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x110, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nCol);
	return result;
}

void CVCF1::SetColText(long nCol, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nCol, lpszNewValue);
}

CString CVCF1::GetDefinedName(LPCTSTR pName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x111, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		pName);
	return result;
}

void CVCF1::SetDefinedName(LPCTSTR pName, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x111, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 pName, lpszNewValue);
}

CString CVCF1::GetEntryRC(long nRow, long nCol)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x112, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetEntryRC(long nRow, long nCol, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, lpszNewValue);
}

CString CVCF1::GetFormattedTextRC(long nRow, long nCol)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x113, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetFormattedTextRC(long nRow, long nCol, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x113, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, lpszNewValue);
}

CString CVCF1::GetFormulaRC(long nRow, long nCol)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x114, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetFormulaRC(long nRow, long nCol, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, lpszNewValue);
}

long CVCF1::GetLastColForRow(long nRow)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x115, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nRow);
	return result;
}

void CVCF1::SetLastColForRow(long nRow, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x115, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nNewValue);
}

BOOL CVCF1::GetLogicalRC(long nRow, long nCol)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x116, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetLogicalRC(long nRow, long nCol, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x116, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, bNewValue);
}

double CVCF1::GetNumberRC(long nRow, long nCol)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x117, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetNumberRC(long nRow, long nCol, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x117, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, newValue);
}

CString CVCF1::GetRowText(long nRow)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x118, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nRow);
	return result;
}

void CVCF1::SetRowText(long nRow, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x118, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, lpszNewValue);
}

CString CVCF1::GetTextRC(long nRow, long nCol)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x119, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetTextRC(long nRow, long nCol, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x119, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, lpszNewValue);
}

short CVCF1::GetTypeRC(long nRow, long nCol)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x11a, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nRow, nCol);
	return result;
}

void CVCF1::SetTypeRC(long nRow, long nCol, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x11a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nCol, nNewValue);
}

void CVCF1::EditPasteValues()
{
	InvokeHelper(0x71, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::GetAlignment(short* pHorizontal, BOOL* pWordWrap, short* pVertical, short* pOrientation)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PBOOL VTS_PI2 VTS_PI2;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pHorizontal, pWordWrap, pVertical, pOrientation);
}

void CVCF1::GetBorder(short* pLeft, short* pRight, short* pTop, short* pBottom, short* pShade, unsigned long* pcrLeft, unsigned long* pcrRight, unsigned long* pcrTop, unsigned long* pcrBottom)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pLeft, pRight, pTop, pBottom, pShade, pcrLeft, pcrRight, pcrTop, pcrBottom);
}

void CVCF1::GetFont(BSTR* pName, short* pSize, BOOL* pBold, BOOL* pItalic, BOOL* pUnderline, BOOL* pStrikeout, unsigned long* pcrColor, BOOL* pOutline, BOOL* pShadow)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_PI2 VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PI4 VTS_PBOOL VTS_PBOOL;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pName, pSize, pBold, pItalic, pUnderline, pStrikeout, pcrColor, pOutline, pShadow);
}

void CVCF1::GetLineStyle(short* pStyle, unsigned long* pcrColor, short* pWeight)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PI4 VTS_PI2;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pStyle, pcrColor, pWeight);
}

void CVCF1::GetPattern(short* pPattern, unsigned long* pcrFG, unsigned long* pcrBG)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PI4 VTS_PI4;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pPattern, pcrFG, pcrBG);
}

void CVCF1::GetProtection(BOOL* pLocked, BOOL* pHidden)
{
	static BYTE parms[] =
		VTS_PBOOL VTS_PBOOL;
	InvokeHelper(0x77, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pLocked, pHidden);
}

void CVCF1::GetTabbedText(long nR1, long nC1, long nR2, long nC2, BOOL bValuesOnly, long* phText)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_PI4;
	InvokeHelper(0x78, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, bValuesOnly, phText);
}

void CVCF1::SetTabbedText(long nStartRow, long nStartCol, long* pRows, long* pCols, BOOL bValuesOnly, LPCTSTR pText)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_BOOL VTS_BSTR;
	InvokeHelper(0x79, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nStartRow, nStartCol, pRows, pCols, bValuesOnly, pText);
}

void CVCF1::AddColPageBreak(long nCol)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol);
}

void CVCF1::AddPageBreak()
{
	InvokeHelper(0x7b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::AddRowPageBreak(long nRow)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow);
}

void CVCF1::AddSelection(long nR1, long nC1, long nR2, long nC2)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2);
}

void CVCF1::Attach(LPCTSTR pTitle)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pTitle);
}

void CVCF1::AttachToSS(long hSrcSS)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hSrcSS);
}

void CVCF1::CalculationDlg()
{
	InvokeHelper(0x80, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::CancelEdit()
{
	InvokeHelper(0x81, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::CheckRecalc()
{
	InvokeHelper(0x82, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ClearClipboard()
{
	InvokeHelper(0x83, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ClearRange(long nR1, long nC1, long nR2, long nC2, short ClearType)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x84, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, ClearType);
}

void CVCF1::ColorPaletteDlg()
{
	InvokeHelper(0x85, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ColWidthDlg()
{
	InvokeHelper(0x86, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::CopyAll(long hSrcSS)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x87, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hSrcSS);
}

void CVCF1::CopyRange(long nDstR1, long nDstC1, long nDstR2, long nDstC2, long hSrcSS, long nSrcR1, long nSrcC1, long nSrcR2, long nSrcC2)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x88, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nDstR1, nDstC1, nDstR2, nDstC2, hSrcSS, nSrcR1, nSrcC1, nSrcR2, nSrcC2);
}

void CVCF1::DefinedNameDlg()
{
	InvokeHelper(0x89, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::DeleteDefinedName(LPCTSTR pName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pName);
}

void CVCF1::DeleteRange(long nR1, long nC1, long nR2, long nC2, short ShiftType)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, ShiftType);
}

void CVCF1::Draw(long hDC, long x, long y, long cx, long cy, long nRow, long nCol, long* pRows, long* pCols, long nFixedRow, long nFixedCol, long nFixedRows, long nFixedCols)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x8c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC, x, y, cx, cy, nRow, nCol, pRows, pCols, nFixedRow, nFixedCol, nFixedRows, nFixedCols);
}

void CVCF1::EditClear(short ClearType)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x8d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ClearType);
}

void CVCF1::EditCopy()
{
	InvokeHelper(0x8e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::EditCopyDown()
{
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::EditCopyRight()
{
	InvokeHelper(0x90, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::EditCut()
{
	InvokeHelper(0x91, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::EditDelete(short ShiftType)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x92, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ShiftType);
}

void CVCF1::EditInsert(short ShiftType)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x93, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ShiftType);
}

void CVCF1::EditPaste()
{
	InvokeHelper(0x94, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::EndEdit()
{
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FilePageSetupDlg()
{
	InvokeHelper(0x96, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FilePrint(BOOL bShowPrintDlg)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x97, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bShowPrintDlg);
}

void CVCF1::FilePrintSetupDlg()
{
	InvokeHelper(0x98, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatAlignmentDlg()
{
	InvokeHelper(0x99, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatBorderDlg()
{
	InvokeHelper(0x9a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatCurrency0()
{
	InvokeHelper(0x9b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatCurrency2()
{
	InvokeHelper(0x9c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatDefaultFontDlg()
{
	InvokeHelper(0x9d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatFixed()
{
	InvokeHelper(0x9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatFixed2()
{
	InvokeHelper(0x9f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatFontDlg()
{
	InvokeHelper(0xa0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatFraction()
{
	InvokeHelper(0xa1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatGeneral()
{
	InvokeHelper(0xa2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatHmmampm()
{
	InvokeHelper(0xa3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatMdyy()
{
	InvokeHelper(0xa4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatNumberDlg()
{
	InvokeHelper(0xa5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatPatternDlg()
{
	InvokeHelper(0xa6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatPercent()
{
	InvokeHelper(0xa7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::FormatScientific()
{
	InvokeHelper(0xa8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::GetActiveCell(long* pRow, long* pCol)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pRow, pCol);
}

short CVCF1::GetColWidth(long nCol)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11b, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nCol);
	return result;
}

void CVCF1::SetColWidth(long nCol, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x11b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nCol, nNewValue);
}

short CVCF1::GetRowHeight(long nRow)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11c, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nRow);
	return result;
}

void CVCF1::SetRowHeight(long nRow, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x11c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, nNewValue);
}

void CVCF1::GetDefaultFont(BSTR* pBuf, short* pSize)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_PI2;
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pBuf, pSize);
}

void CVCF1::GetHdrSelection(BOOL* pTopLeftHdr, BOOL* pRowHdr, BOOL* pColHdr)
{
	static BYTE parms[] =
		VTS_PBOOL VTS_PBOOL VTS_PBOOL;
	InvokeHelper(0xab, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pTopLeftHdr, pRowHdr, pColHdr);
}

void CVCF1::GetIteration(BOOL* pIteration, short* pMaxIterations, double* pMaxChange)
{
	static BYTE parms[] =
		VTS_PBOOL VTS_PI2 VTS_PR8;
	InvokeHelper(0xac, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pIteration, pMaxIterations, pMaxChange);
}

void CVCF1::GetPrintScale(short* pScale, BOOL* pFitToPage, long* pVPages, long* pHPages)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PBOOL VTS_PI4 VTS_PI4;
	InvokeHelper(0xad, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pScale, pFitToPage, pVPages, pHPages);
}

void CVCF1::GetSelection(short nSelection, long* pR1, long* pC1, long* pR2, long* pC2)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xae, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSelection, pR1, pC1, pR2, pC2);
}

void CVCF1::GotoDlg()
{
	InvokeHelper(0xaf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::HeapMin()
{
	InvokeHelper(0xb0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::InitTable()
{
	InvokeHelper(0xb1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::InsertRange(long nR1, long nC1, long nR2, long nC2, short ShiftType)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xb2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, ShiftType);
}

void CVCF1::LineStyleDlg()
{
	InvokeHelper(0xb3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::MoveRange(long nR1, long nC1, long nR2, long nC2, long nRowOffset, long nColOffset)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xb4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, nRowOffset, nColOffset);
}

void CVCF1::ObjAddItem(long ID, LPCTSTR pItem)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, pItem);
}

void CVCF1::ObjAddSelection(long ID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID);
}

void CVCF1::ObjBringToFront()
{
	InvokeHelper(0xb7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ObjDeleteItem(long ID, short nItem)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xb8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, nItem);
}

void CVCF1::ObjGetCell(long ID, short* pControlCellType, long* pRow, long* pCol)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_PI4 VTS_PI4;
	InvokeHelper(0xb9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, pControlCellType, pRow, pCol);
}

void CVCF1::ObjGetPos(long ID, float* pX1, float* pY1, float* pX2, float* pY2)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4 VTS_PR4 VTS_PR4 VTS_PR4;
	InvokeHelper(0xba, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, pX1, pY1, pX2, pY2);
}

void CVCF1::ObjGetSelection(short nSelection, long* pID)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4;
	InvokeHelper(0xbb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSelection, pID);
}

void CVCF1::ObjInsertItem(long ID, short nItem, LPCTSTR pItem)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0xbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, nItem, pItem);
}

void CVCF1::ObjNameDlg()
{
	InvokeHelper(0xbd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ObjNew(short ObjType, float nX1, float nY1, float nX2, float nY2, long* pID)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_PI4;
	InvokeHelper(0xbe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ObjType, nX1, nY1, nX2, nY2, pID);
}

void CVCF1::ObjNewPicture(float nX1, float nY1, float nX2, float nY2, long* pID, long hMF, long nMapMode, long nWndExtentX, long nWndExtentY)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_PI4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xbf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nX1, nY1, nX2, nY2, pID, hMF, nMapMode, nWndExtentX, nWndExtentY);
}

void CVCF1::ObjOptionsDlg()
{
	InvokeHelper(0xc0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ObjPosToTwips(float nX1, float nY1, float nX2, float nY2, long* pX, long* pY, long* pCX, long* pCY, short* pShown)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI2;
	InvokeHelper(0xc1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nX1, nY1, nX2, nY2, pX, pY, pCX, pCY, pShown);
}

void CVCF1::ObjSendToBack()
{
	InvokeHelper(0xc2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ObjSetCell(long ID, short ControlCellType, long nRow, long nCol)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xc3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, ControlCellType, nRow, nCol);
}

void CVCF1::ObjSetPicture(long ID, long hMF, short nMapMode, long nWndExtentX, long nWndExtentY)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xc4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, hMF, nMapMode, nWndExtentX, nWndExtentY);
}

void CVCF1::ObjSetPos(long ID, float nX1, float nY1, float nX2, float nY2)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0xc5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID, nX1, nY1, nX2, nY2);
}

void CVCF1::ObjSetSelection(long ID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID);
}

void CVCF1::OpenFileDlg(LPCTSTR pTitle, long hWndParent, BSTR* pBuf)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_PBSTR;
	InvokeHelper(0xc7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pTitle, hWndParent, pBuf);
}

void CVCF1::ProtectionDlg()
{
	InvokeHelper(0xc8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::RangeToTwips(long nRow1, long nCol1, long nRow2, long nCol2, long* pX, long* pY, long* pCX, long* pCY, short* pShown)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI2;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow1, nCol1, nRow2, nCol2, pX, pY, pCX, pCY, pShown);
}

void CVCF1::Read(LPCTSTR pPathName, short* pFileType)
{
	static BYTE parms[] =
		VTS_BSTR VTS_PI2;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pPathName, pFileType);
}

void CVCF1::ReadFromBlob(long hBlob, short nReservedBytes)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hBlob, nReservedBytes);
}

void CVCF1::Recalc()
{
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::RemoveColPageBreak(long nCol)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol);
}

void CVCF1::RemovePageBreak()
{
	InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::RemoveRowPageBreak(long nRow)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow);
}

void CVCF1::RowHeightDlg()
{
	InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::SaveFileDlg(LPCTSTR pTitle, BSTR* pBuf, short* pFileType)
{
	static BYTE parms[] =
		VTS_BSTR VTS_PBSTR VTS_PI2;
	InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pTitle, pBuf, pFileType);
}

void CVCF1::SaveWindowInfo()
{
	InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::SetActiveCell(long nRow, long nCol)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow, nCol);
}

void CVCF1::SetAlignment(short HAlign, BOOL bWordWrap, short VAlign, short nOrientation)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_I2 VTS_I2;
	InvokeHelper(0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 HAlign, bWordWrap, VAlign, nOrientation);
}

void CVCF1::SetBorder(short nOutline, short nLeft, short nRight, short nTop, short nBottom, short nShade, unsigned long crOutline, unsigned long crLeft, unsigned long crRight, unsigned long crTop, unsigned long crBottom)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOutline, nLeft, nRight, nTop, nBottom, nShade, crOutline, crLeft, crRight, crTop, crBottom);
}

void CVCF1::SetColWidth(long nC1, long nC2, short nWidth, BOOL bDefColWidth)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0xd6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nC1, nC2, nWidth, bDefColWidth);
}

void CVCF1::SetColWidthAuto(long nR1, long nC1, long nR2, long nC2, BOOL bSetDefaults)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xd7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, bSetDefaults);
}

void CVCF1::SetDefaultFont(LPCTSTR pName, short nSize)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0xd8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pName, nSize);
}

void CVCF1::SetFont(LPCTSTR pName, short nSize, BOOL bBold, BOOL bItalic, BOOL bUnderline, BOOL bStrikeout, unsigned long crColor, BOOL bOutline, BOOL bShadow)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pName, nSize, bBold, bItalic, bUnderline, bStrikeout, crColor, bOutline, bShadow);
}

void CVCF1::SetHdrSelection(BOOL bTopLeftHdr, BOOL bRowHdr, BOOL bColHdr)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0xda, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bTopLeftHdr, bRowHdr, bColHdr);
}

void CVCF1::SetIteration(BOOL bIteration, short nMaxIterations, double nMaxChange)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I2 VTS_R8;
	InvokeHelper(0xdb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bIteration, nMaxIterations, nMaxChange);
}

void CVCF1::SetLineStyle(short nStyle, unsigned long crColor, short nWeight)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I2;
	InvokeHelper(0xdc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nStyle, crColor, nWeight);
}

void CVCF1::SetPattern(short nPattern, unsigned long crFG, unsigned long crBG)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nPattern, crFG, crBG);
}

void CVCF1::SetPrintAreaFromSelection()
{
	InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::SetPrintScale(short nScale, BOOL bFitToPage, short nVPages, short nHPages)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_I2 VTS_I2;
	InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nScale, bFitToPage, nVPages, nHPages);
}

void CVCF1::SetPrintTitlesFromSelection()
{
	InvokeHelper(0xe0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::SetProtection(BOOL bLocked, BOOL bHidden)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0xe1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bLocked, bHidden);
}

void CVCF1::SetRowHeight(long nR1, long nR2, short nHeight, BOOL bDefRowHeight)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0xe2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nR2, nHeight, bDefRowHeight);
}

void CVCF1::SetRowHeightAuto(long nR1, long nC1, long nR2, long nC2, BOOL bSetDefaults)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xe3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, bSetDefaults);
}

void CVCF1::SetSelection(long nR1, long nC1, long nR2, long nC2)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xe4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2);
}

void CVCF1::ShowActiveCell()
{
	InvokeHelper(0xe5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::Sort3(long nR1, long nC1, long nR2, long nC2, BOOL bSortByRows, long nKey1, long nKey2, long nKey3)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xe6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, bSortByRows, nKey1, nKey2, nKey3);
}

void CVCF1::SortDlg()
{
	InvokeHelper(0xe7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::StartEdit(BOOL bClear, BOOL bInCellEditFocus, BOOL bArrowsExitEditMode)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0xe8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bClear, bInCellEditFocus, bArrowsExitEditMode);
}

void CVCF1::SwapTables(long hSS2)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hSS2);
}

void CVCF1::TransactCommit()
{
	InvokeHelper(0xea, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::TransactRollback()
{
	InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::TransactStart()
{
	InvokeHelper(0xec, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::TwipsToRC(long x, long y, long* pRow, long* pCol)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xed, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x, y, pRow, pCol);
}

void CVCF1::SSUpdate()
{
	InvokeHelper(0xee, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CVCF1::SSVersion()
{
	short result;
	InvokeHelper(0xef, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CVCF1::Write(LPCTSTR pPathName, short FileType)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0xf0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pPathName, FileType);
}

void CVCF1::WriteToBlob(long* phBlob, short nReservedBytes)
{
	static BYTE parms[] =
		VTS_PI4 VTS_I2;
	InvokeHelper(0xf1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 phBlob, nReservedBytes);
}

void CVCF1::SetRowHidden(long nRow1, long nRow2, BOOL bHidden)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xf2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow1, nRow2, bHidden);
}

void CVCF1::SetColHidden(long nCol1, long nCol2, BOOL bHidden)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xf3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol1, nCol2, bHidden);
}

void CVCF1::SetColWidthTwips(long nCol1, long nCol2, long nWidth, BOOL bDefColWidth)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xf4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol1, nCol2, nWidth, bDefColWidth);
}

CString CVCF1::GetDefinedNameByIndex(long nName)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nName);
	return result;
}

void CVCF1::SetDefinedNameByIndex(long nName, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x11d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nName, lpszNewValue);
}

CString CVCF1::GetSheetName(long nSheet)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nSheet);
	return result;
}

void CVCF1::SetSheetName(long nSheet, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x11e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nSheet, lpszNewValue);
}

unsigned long CVCF1::GetPaletteEntry(long nEntry)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nEntry);
	return result;
}

void CVCF1::SetPaletteEntry(long nEntry, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x11f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nEntry, newValue);
}

void CVCF1::EditInsertSheets()
{
	InvokeHelper(0xf5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::EditDeleteSheets()
{
	InvokeHelper(0xf6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::InsertSheets(long nSheet, long nSheets)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSheet, nSheets);
}

void CVCF1::DeleteSheets(long nSheet, long nSheets)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSheet, nSheets);
}

void CVCF1::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CVCF1::GetColWidthTwips(long Col)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x120, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		Col);
	return result;
}

void CVCF1::SetColWidthTwips(long Col, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x120, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Col, nNewValue);
}

long CVCF1::NextColPageBreak(long Col)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Col);
	return result;
}

long CVCF1::NextRowPageBreak(long Row)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Row);
	return result;
}

long CVCF1::ObjFirstID()
{
	long result;
	InvokeHelper(0xfb, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVCF1::ObjNextID(long ID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ID);
	return result;
}

short CVCF1::ObjGetItemCount(long ID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		ID);
	return result;
}

short CVCF1::ObjGetType(long ID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		ID);
	return result;
}

short CVCF1::ObjGetSelectionCount()
{
	short result;
	InvokeHelper(0xff, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

CString CVCF1::FormatRCNr(long Row, long Col, BOOL DoAbsolute)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x100, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Row, Col, DoAbsolute);
	return result;
}

long CVCF1::SS()
{
	long result;
	InvokeHelper(0x101, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CVCF1::ErrorNumberToText(long SSError)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		SSError);
	return result;
}

CString CVCF1::GetObjItem(long ID, short Item)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		ID, Item);
	return result;
}

void CVCF1::SetObjItem(long ID, short Item, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x121, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 ID, Item, lpszNewValue);
}

CString CVCF1::GetObjItems(long ID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x122, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		ID);
	return result;
}

void CVCF1::SetObjItems(long ID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x122, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 ID, lpszNewValue);
}

CString CVCF1::GetObjName(long ID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		ID);
	return result;
}

void CVCF1::SetObjName(long ID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x123, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 ID, lpszNewValue);
}

CString CVCF1::GetObjText(long ID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x124, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		ID);
	return result;
}

void CVCF1::SetObjText(long ID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x124, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 ID, lpszNewValue);
}

short CVCF1::GetObjValue(long ID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x125, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		ID);
	return result;
}

void CVCF1::SetObjValue(long ID, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x125, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 ID, nNewValue);
}

BOOL CVCF1::GetObjVisible(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x126, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

void CVCF1::SetObjVisible(long ID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x126, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 ID, bNewValue);
}

long CVCF1::ObjNameToID(LPCTSTR Name)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x103, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Name);
	return result;
}

long CVCF1::DefinedNameCount()
{
	long result;
	InvokeHelper(0x104, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CVCF1::GetAutoFillItems(short Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x127, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

void CVCF1::SetAutoFillItems(short Index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x127, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, lpszNewValue);
}

void CVCF1::ValidationRuleDlg()
{
	InvokeHelper(0x105, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::SetValidationRule(LPCTSTR Rule, LPCTSTR Text)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x106, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Rule, Text);
}

void CVCF1::GetValidationRule(BSTR* Rule, BSTR* Text)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_PBSTR;
	InvokeHelper(0x107, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Rule, Text);
}

short CVCF1::AutoFillItemsCount()
{
	short result;
	InvokeHelper(0x108, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CVCF1::CopyRangeEx(long nDstSheet, long nDstR1, long nDstC1, long nDstR2, long nDstC2, long hSrcSS, long nSrcSheet, long nSrcR1, long nSrcC1, long nSrcR2, long nSrcC2)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x109, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nDstSheet, nDstR1, nDstC1, nDstR2, nDstC2, hSrcSS, nSrcSheet, nSrcR1, nSrcC1, nSrcR2, nSrcC2);
}

void CVCF1::Sort(long nR1, long nC1, long nR2, long nC2, BOOL bSortByRows, const VARIANT& Keys)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x10a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nR1, nC1, nR2, nC2, bSortByRows, &Keys);
}

BOOL CVCF1::GetColHidden(long nCol)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x128, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nCol);
	return result;
}

void CVCF1::SetColHidden(long nCol, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nCol, bNewValue);
}

BOOL CVCF1::GetRowHidden(long nRow)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x129, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nRow);
	return result;
}

void CVCF1::SetRowHidden(long nRow, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x129, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nRow, bNewValue);
}

void CVCF1::DeleteAutoFillItems(short nIndex)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nIndex);
}

void CVCF1::ODBCConnect(BSTR* pConnect, BOOL bShowErrors, short* pRetCode)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_BOOL VTS_PI2;
	InvokeHelper(0x10c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pConnect, bShowErrors, pRetCode);
}

void CVCF1::ODBCDisconnect()
{
	InvokeHelper(0x10d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::ODBCQuery(BSTR* pQuery, long nRow, long nCol, BOOL bForceShowDlg, BOOL* pSetColNames, BOOL* pSetColFormats, BOOL* pSetColWidths, BOOL* pSetMaxRC, short* pRetCode)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_I4 VTS_I4 VTS_BOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PI2;
	InvokeHelper(0x10e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pQuery, nRow, nCol, bForceShowDlg, pSetColNames, pSetColFormats, pSetColWidths, pSetMaxRC, pRetCode);
}

BOOL CVCF1::GetSheetSelected(long nSheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nSheet);
	return result;
}

void CVCF1::SetSheetSelected(long nSheet, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x12a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nSheet, bNewValue);
}

void CVCF1::LaunchDesigner()
{
	InvokeHelper(0x10f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVCF1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
